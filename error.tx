bappi@DESKTOP-DKL26KA:~$ metaplex core asset update \
  --mint 4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg \
  --json --data \
  '{"uri":"https://raw.githubusercontent.com/jubaerbappi/mytoken/main/metadata.json"}' \
  --keypair ~/my-key.json \
  --env mainnet-beta
{
  "error": {
    "oclif": {
      "exit": 2
    },
    "parse": {
      "input": {
        "args": {
          "assetId": {
            "name": "assetId",
            "description": "Asset to update",
            "required": true,
            "input": [],
            "type": "option"
          }
        },
        "argv": [
          "--mint",
          "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg",
          "--json",
          "--data",
          "{\"uri\":\"https://raw.githubusercontent.com/jubaerbappi/mytoken/main/metadata.json\"}",
          "--keypair",
          "/home/bappi/my-key.json",
          "--env",
          "mainnet-beta"
        ],
        "context": {
          "argv": [
            "--mint",
            "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg",
            "--json",
            "--data",
            "{\"uri\":\"https://raw.githubusercontent.com/jubaerbappi/mytoken/main/metadata.json\"}",
            "--keypair",
            "/home/bappi/my-key.json",
            "--env",
            "mainnet-beta"
          ],
          "config": {
            "options": {
              "root": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli/bin/run.js"
            },
            "arch": "x64",
            "bin": "mplx",
            "cacheDir": "/home/bappi/.cache/mplx",
            "channel": "stable",
            "configDir": "/home/bappi/.config/mplx",
            "dataDir": "/home/bappi/.local/share/mplx",
            "dirname": "mplx",
            "flexibleTaxonomy": false,
            "home": "/home/bappi",
            "isSingleCommandCLI": false,
            "name": "@metaplex-foundation/cli",
            "pjson": {
              "name": "@metaplex-foundation/cli",
              "description": "Metaplex CLI",
              "version": "0.0.6",
              "author": "Metaplex <contact@metaplex.com>",
              "bin": {
                "mplx": "./bin/run.js"
              },
              "oclif": {
                "commands": "./dist/commands",
                "bin": "mplx",
                "plugins": [
                  "@oclif/plugin-help",
                  "@oclif/plugin-version",
                  "@oclif/plugin-not-found",
                  "@oclif/plugin-autocomplete",
                  "@oclif/plugin-commands",
                  "@oclif/plugin-plugins"
                ],
                "topicSeparator": " ",
                "dirname": "mplx"
              },
              "bugs": "https://github.com/metaplex-foundation/cli/issues",
              "dependencies": {
                "@ardrive/turbo-sdk": "^1.25.0",
                "@inquirer/prompts": "^7.5.3",
                "@inquirer/testing": "^2.1.47",
                "@ledgerhq/hw-app-solana": "^7.2.4",
                "@ledgerhq/hw-transport": "^6.31.4",
                "@ledgerhq/hw-transport-node-hid-singleton": "^6.31.5",
                "@metaplex-foundation/mpl-core": "^1.4.0",
                "@metaplex-foundation/mpl-core-candy-machine": "^0.3.0",
                "@metaplex-foundation/mpl-token-metadata": "^3.4.0",
                "@metaplex-foundation/mpl-toolbox": "0.10.0",
                "@metaplex-foundation/umi": "1.0.0",
                "@metaplex-foundation/umi-bundle-defaults": "1.0.0",
                "@metaplex-foundation/umi-signer-wallet-adapters": "1.0.0",
                "@metaplex-foundation/umi-uploader-irys": "1.0.1",
                "@metaplex-foundation/umi-web3js-adapters": "1.0.0",
                "@oclif/plugin-autocomplete": "^3.2.29",
                "@oclif/plugin-commands": "^4.1.25",
                "@oclif/plugin-help": "^6.2.28",
                "@oclif/plugin-not-found": "^3.2.54",
                "@oclif/plugin-plugins": "^5.4.38",
                "@oclif/plugin-version": "^2.2.28",
                "@solana/web3.js": "^1.98.2",
                "ansis": "^3.17.0",
                "chalk": "^5.4.1",
                "cli-progress": "^3.12.0",
                "file-type": "^21.0.0",
                "mime": "^4.0.7",
                "mime-types": "^2.1.35",
                "node-fetch": "^3.3.2",
                "ora": "8.1.1",
                "p-map": "^7.0.3"
              },
              "devDependencies": {
                "@metaplex-foundation/amman": "^0.12.1",
                "@metaplex-foundation/amman-client": "^0.2.4",
                "@oclif/core": "^4.3.0",
                "@oclif/prettier-config": "^0.2.1",
                "@oclif/test": "^4.1.13",
                "@types/async-retry": "^1.4.9",
                "@types/bn.js": "^5.1.6",
                "@types/chai": "^4.3.20",
                "@types/chalk": "^2.2.4",
                "@types/cli-progress": "^3.11.6",
                "@types/mime-types": "^2.1.4",
                "@types/mocha": "^10.0.10",
                "@types/node": "^18.19.108",
                "@types/node-hid": "^1.3.4",
                "chai": "^4.5.0",
                "eslint": "^8.57.1",
                "eslint-config-oclif": "^5.2.2",
                "eslint-config-oclif-typescript": "^3.1.14",
                "eslint-config-prettier": "^9.1.0",
                "install": "^0.13.0",
                "mocha": "^10.8.2",
                "mock-stdin": "^1.0.0",
                "oclif": "^4.17.46",
                "shx": "^0.3.4",
                "ts-node": "^10.9.2",
                "typescript": "^5.8.3"
              },
              "engines": {
                "node": ">=20.0.0"
              },
              "files": [
                "bin",
                "dist",
                "oclif.manifest.json",
                "oclif.json",
                "oclif.manifest.json.js"
              ],
              "homepage": "https://github.com/metaplex-foundation/cli",
              "keywords": [
                "oclif"
              ],
              "license": "Metaplex License",
              "main": "dist/index.js",
              "type": "module",
              "repository": "metaplex-foundation/cli",
              "scripts": {
                "clean": "shx rm -rf dist tsconfig.build.tsbuildinfo",
                "prebuild": "pnpm run clean",
                "build": "tsc -b tsconfig.build.json --verbose",
                "build:clean": "pnpm run clean && pnpm run build",
                "dev": "./bin/dev.js",
                "mplx": "./bin/run.js",
                "lint": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts",
                "lint:fix": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts --fix",
                "postpack": "shx rm -f oclif.manifest.json",
                "prepack": "oclif manifest && oclif readme",
                "test": "mocha --forbid-only \"test/**/*.test.ts\"",
                "version": "oclif readme && git add README.md",
                "validator": "CI=1 amman start --config ./.validator.cjs",
                "validator:stop": "amman stop",
                "verify": "tsc --noEmit && pnpm run build:clean"
              },
              "types": "dist/index.d.ts",
              "packageManager": "pnpm@9.12.3+sha512.cce0f9de9c5a7c95bef944169cc5dfe8741abfb145078c0d508b868056848a87c81e626246cb60967cbd7fd29a6c062ef73ff840d96b3c86c40ac92cf4a813ee"
            },
            "platform": "wsl",
            "plugins": {},
            "root": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli",
            "shell": "bash",
            "topicSeparator": " ",
            "updateConfig": {
              "node": {},
              "s3": {
                "templates": {
                  "target": {
                    "baseDir": "<%- bin %>",
                    "manifest": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %><%- platform %>-<%- arch %>",
                    "unversioned": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %><%- bin %>-<%- platform %>-<%- arch %><%- ext %>",
                    "versioned": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %><%- bin %>-v<%- version %>/<%- bin %>-v<%- version %>-<%- platform %>-<%- arch %><%- ext %>"
                  },
                  "vanilla": {
                    "baseDir": "<%- bin %>",
                    "manifest": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %>version",
                    "unversioned": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %><%- bin %><%- ext %>",
                    "versioned": "<%- channel === 'stable' ? '' : 'channels/' + channel + '/' %><%- bin %>-v<%- version %>/<%- bin %>-v<%- version %><%- ext %>"
                  }
                }
              }
            },
            "userAgent": "@metaplex-foundation/cli/0.0.6 wsl-x64 node-v24.2.0",
            "valid": true,
            "version": "0.0.6",
            "warned": false,
            "windows": false,
            "_base": "@oclif/core@4.4.0",
            "_commandIDs": [
              "config",
              "config:explorer:set",
              "config:get",
              "config:rpcs:add",
              "config:rpcs:list",
              "config:rpcs:remove",
              "config:rpcs:set",
              "config:set",
              "config:wallets:add",
              "config:wallets:list",
              "config:wallets:new",
              "config:wallets:remove",
              "config:wallets:set",
              "core",
              "core:asset",
              "core:asset:burn",
              "core:asset:create",
              "core:asset:fetch",
              "core:asset:template",
              "core:asset:update",
              "core:collection",
              "core:collection:create",
              "core:collection:fetch",
              "core:collection:template",
              "core:plugins",
              "core:plugins:add",
              "core:plugins:generate",
              "toolbox",
              "toolbox:rent",
              "toolbox:sol",
              "toolbox:sol:airdrop",
              "toolbox:sol:balance",
              "toolbox:sol:transfer",
              "toolbox:token",
              "toolbox:token:create",
              "toolbox:token:transfer",
              "toolbox:token:update",
              "autocomplete",
              "autocomplete:create",
              "autocomplete:script",
              "commands",
              "help",
              "plugins",
              "plugins:inspect",
              "plugins:install",
              "plugins:add",
              "plugins:link",
              "plugins:reset",
              "plugins:uninstall",
              "plugins:unlink",
              "plugins:remove",
              "plugins:update",
              "version"
            ],
            "_commands": {},
            "_topics": {},
            "commandPermutations": {
              "validPermutations": {}
            },
            "pluginLoader": {
              "options": {
                "root": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli/bin/run.js"
              },
              "errors": [],
              "plugins": {},
              "pluginsProvided": false
            },
            "rootPlugin": {
              "options": {
                "isRoot": true,
                "root": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli/bin/run.js"
              },
              "_base": "@oclif/core@4.4.0",
              "alias": "@metaplex-foundation/cli",
              "alreadyLoaded": false,
              "children": [],
              "commandIDs": [
                "config:get",
                "config",
                "config:set",
                "core",
                "toolbox",
                "toolbox:rent",
                "config:explorer:set",
                "config:rpcs:add",
                "config:rpcs:list",
                "config:rpcs:remove",
                "config:rpcs:set",
                "config:wallets:add",
                "config:wallets:list",
                "config:wallets:new",
                "config:wallets:remove",
                "config:wallets:set",
                "core:asset:burn",
                "core:asset:create",
                "core:asset:fetch",
                "core:asset",
                "core:asset:template",
                "core:asset:update",
                "core:collection:create",
                "core:collection:fetch",
                "core:collection",
                "core:collection:template",
                "core:plugins:add",
                "core:plugins:generate",
                "core:plugins",
                "toolbox:sol:airdrop",
                "toolbox:sol:balance",
                "toolbox:sol",
                "toolbox:sol:transfer",
                "toolbox:token:create",
                "toolbox:token",
                "toolbox:token:transfer",
                "toolbox:token:update"
              ],
              "commands": [
                {
                  "aliases": [],
                  "args": {},
                  "description": "Show the current config",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {
                    "config": {
                      "char": "c",
                      "description": "path to config file. Default is ~/.config/mplx/config.json",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Set the preferred blockchain explorer",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:explorer:set",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "explorer",
                    "set.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "key": {
                      "description": "The key to get",
                      "name": "key",
                      "options": [
                        "rpcUrl",
                        "commitment",
                        "payer",
                        "keypair"
                      ],
                      "required": true
                    }
                  },
                  "description": "Get a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> keypair",
                    "<%= config.bin %> <%= command.id %> payer",
                    "<%= config.bin %> <%= command.id %> rpcUrl",
                    "<%= config.bin %> <%= command.id %> commitment"
                  ],
                  "flags": {
                    "config": {
                      "char": "c",
                      "description": "path to config file. Default is ~/.config/mplx/config.json",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:get",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "get.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "name": {
                      "description": "Name of wallet (max 6 characters and no spaces)",
                      "name": "name",
                      "required": true
                    },
                    "endpoint": {
                      "description": "Path to keypair json file",
                      "name": "endpoint",
                      "required": true
                    }
                  },
                  "description": "Set a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> add dev1 /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> set dev1",
                    "<%= config.bin %> <%= command.id %> remove dev1"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:rpcs:add",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "rpcs",
                    "add.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Set a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> list"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:rpcs:list",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "rpcs",
                    "list.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "name": {
                      "description": "Name of RPC to remove from config",
                      "name": "name",
                      "required": true
                    }
                  },
                  "description": "Set a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> remove dev1"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:rpcs:remove",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "rpcs",
                    "remove.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Set a new active wallet from a list of wallets",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:rpcs:set",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "rpcs",
                    "set.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "key": {
                      "description": "The key to set",
                      "name": "key",
                      "options": [
                        "rpcUrl",
                        "commitment",
                        "payer",
                        "keypair"
                      ],
                      "required": true
                    },
                    "value": {
                      "description": "The value to set",
                      "name": "value",
                      "required": true
                    }
                  },
                  "description": "Set a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> payer /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> rpcUrl http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> commitment confirmed"
                  ],
                  "flags": {
                    "config": {
                      "char": "c",
                      "description": "path to config file. Default is ~/.config/mplx/config.json",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:set",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "set.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "name": {
                      "description": "Name of wallet (max 6 characters, alphanumeric, hyphens and underscores only)",
                      "name": "name",
                      "required": true
                    },
                    "path": {
                      "description": "Path to keypair json file",
                      "name": "path",
                      "required": true
                    }
                  },
                  "description": "Set a config value from a key",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> add dev1 /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> set dev1",
                    "<%= config.bin %> <%= command.id %> remove dev1"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:wallets:add",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "wallets",
                    "add.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "List all wallets",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> list"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:wallets:list",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "wallets",
                    "list.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Create a new wallet and optionally add it to the config file",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>",
                    "<%= config.bin %> <%= command.id %> --name my-wallet",
                    "<%= config.bin %> <%= command.id %> --name my-wallet --output ./wallets",
                    "<%= config.bin %> <%= command.id %> --name my-wallet --hidden"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "output": {
                      "description": "Directory path where to save the wallet file",
                      "name": "output",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "hidden": {
                      "description": "Save wallet in the hidden `mplx config` folder",
                      "name": "hidden",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Name for wallet (max 6 characters, alphanumeric, hyphens and underscores only). If provided, the wallet will be added to the config file",
                      "name": "name",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:wallets:new",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "wallets",
                    "new.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "name": {
                      "description": "Name of wallet to remove from config",
                      "name": "name",
                      "required": true
                    }
                  },
                  "description": "Remove a wallet from the config",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> remove dev1"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:wallets:remove",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "wallets",
                    "remove.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Set a new active wallet from a list of wallets",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "config:wallets:set",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "config",
                    "wallets",
                    "set.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "MPL Core Program",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "MPL Core Asset Module",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "asset": {
                      "description": "Burn at single asset by mint",
                      "name": "asset"
                    }
                  },
                  "description": "Burn a single Asset or a list of Assets",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> assetId",
                    "<%= config.bin %> <%= command.id %> --list ./assetsToBurn.json"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "list": {
                      "description": "File path to a .json list of Assets to burn in JSON array format (e.g. [asset1, asset2])",
                      "name": "list",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "collection": {
                      "description": "Collection ID to burn Asset from",
                      "name": "collection",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset:burn",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "burn.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Create an MPL Core Asset using 3 different methods:\n\n  1. Simple Creation: Create a single Asset by providing the name and URI of the metadata.\n     Example: mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\"\n\n  2. File-based Creation: Create a single Asset by providing an image file and a JSON metadata file.\n     Example: mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\"\n\n  3. Interactive Wizard: Create an Asset using the interactive wizard which guides you through the process.\n     Example: mplx core asset create --wizard\n\n  Additional Options:\n  - Use --collection to specify a collection ID for the asset\n  - Use --plugins to interactively select and configure plugins\n  - Use --pluginsFile to provide plugin configuration from a JSON file\n  ",
                  "examples": [
                    "$ mplx core asset create --wizard",
                    "$ mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\"",
                    "$ mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\"",
                    "$ mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\" --collection \"collection_id_here\"",
                    "$ mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\" --collection \"collection_id_here\""
                  ],
                  "flags": {
                    "json": {
                      "dependsOn": [
                        "files"
                      ],
                      "exclusive": [
                        "name",
                        "uri",
                        "wizard"
                      ],
                      "hidden": true,
                      "name": "json",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "wizard": {
                      "description": "Use interactive wizard to create asset",
                      "name": "wizard",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Asset name",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "name",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "uri": {
                      "description": "URI of the Asset metadata",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "uri",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "collection": {
                      "description": "Collection ID",
                      "name": "collection",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "files": {
                      "dependsOn": [
                        "image",
                        "json"
                      ],
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "files",
                      "summary": "Signify that the files are being uploaded -i/--image and -j/--json are required",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "image": {
                      "dependsOn": [
                        "files"
                      ],
                      "description": "path to image file to upload and assign to Asset",
                      "exclusive": [
                        "--name",
                        "--uri",
                        "wizard"
                      ],
                      "hidden": true,
                      "name": "image",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "plugins": {
                      "name": "plugins",
                      "required": false,
                      "summary": "Use interactive plugin selection",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "pluginsFile": {
                      "exclusive": [
                        "plugins"
                      ],
                      "name": "pluginsFile",
                      "required": false,
                      "summary": "Path to a json file with plugin data",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset:create",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "core asset create [FLAGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "create.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "asset": {
                      "description": "The asset ID to fetch",
                      "name": "asset"
                    }
                  },
                  "description": "Fetch an asset by mint address. Use --download to save files to disk. Without specific flags, downloads all files (asset data, metadata, and image).",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> <assetId>",
                    "<%= config.bin %> <%= command.id %> <assetId> --download",
                    "<%= config.bin %> <%= command.id %> <assetId> --download --output ./assets",
                    "<%= config.bin %> <%= command.id %> <assetId> --download --image",
                    "<%= config.bin %> <%= command.id %> <assetId> --download --metadata",
                    "<%= config.bin %> <%= command.id %> <assetId> --download --asset",
                    "<%= config.bin %> <%= command.id %> <assetId> --download --image --metadata"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "download": {
                      "description": "Download asset files to disk. Without specific flags, downloads all files.",
                      "name": "download",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "output": {
                      "dependsOn": [
                        "download"
                      ],
                      "description": "Directory path where to save the downloaded assets",
                      "name": "output",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "image": {
                      "dependsOn": [
                        "download"
                      ],
                      "description": "Download the image file (requires --download)",
                      "name": "image",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "metadata": {
                      "dependsOn": [
                        "download"
                      ],
                      "description": "Download the metadata file (requires --download)",
                      "name": "metadata",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "asset": {
                      "dependsOn": [
                        "download"
                      ],
                      "description": "Download the asset data file (requires --download)",
                      "name": "asset",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset:fetch",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "fetch.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "output": {
                      "description": "Output directory, if not provided, the current working directory will be used",
                      "name": "output"
                    }
                  },
                  "description": "Generate a template folder for Asset metadata and image",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>",
                    "<%= config.bin %> <%= command.id %> -o",
                    "<%= config.bin %> <%= command.id %> -o /path/to/directory"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset:template",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "template.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "assetId": {
                      "description": "Asset to update",
                      "name": "assetId",
                      "required": true
                    }
                  },
                  "description": "Update an MPL Core Asset",
                  "examples": [
                    "Single Asset Update:",
                    "<%= config.bin %> <%= command.id %> <assetId> --name \"Updated Asset\" --uri \"https://example.com/metadata.json\"",
                    "<%= config.bin %> <%= command.id %> <assetId> --json ./asset/metadata.json --image ./asset/image.jpg --sync",
                    "<%= config.bin %> <%= command.id %> <assetId> --name \"Updated Asset\"",
                    "<%= config.bin %> <%= command.id %> <assetId> --image ./asset/image.jpg",
                    "<%= config.bin %> <%= command.id %> <assetId> --json ./asset/metadata.json"
                  ],
                  "flags": {
                    "json": {
                      "description": "Path to JSON file",
                      "exclusive": [
                        "name",
                        "uri"
                      ],
                      "name": "json",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "name": {
                      "description": "Asset name",
                      "exclusive": [
                        "json"
                      ],
                      "name": "name",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "uri": {
                      "description": "URI of the Asset metadata",
                      "exclusive": [
                        "json"
                      ],
                      "name": "uri",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "image": {
                      "description": "Path to image file",
                      "name": "image",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "collectionId": {
                      "description": "Collection ID",
                      "name": "collectionId",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:asset:update",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "asset",
                    "update.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "MPL Core Collection Module",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:collection",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "collection",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Create an MPL Core Collection using 3 different methods:\n\n  1. Simple Creation: Create a single Collection by providing the name and URI of the metadata.\n     Example: mplx core collection create --name \"My Collection\" --uri \"https://example.com/metadata.json\"\n\n  2. File-based Creation: Create a single Collection by providing an image file and a JSON metadata file.\n     Example: mplx core collection create --files --image \"./my-collection.png\" --json \"./metadata.json\"\n\n  3. Interactive Wizard: Create a Collection using the interactive wizard which guides you through the process.\n     Example: mplx core collection create --wizard\n\n  Additional Options:\n  - Use --plugins to interactively select and configure plugins\n  - Use --pluginsFile to provide plugin configuration from a JSON file\n  ",
                  "examples": [
                    "$ mplx core collection create --wizard",
                    "$ mplx core collection create --name \"My Collection\" --uri \"https://example.com/metadata.json\"",
                    "$ mplx core collection create --files --image \"./my-collection.png\" --json \"./metadata.json\""
                  ],
                  "flags": {
                    "json": {
                      "char": "j",
                      "dependsOn": [
                        "files"
                      ],
                      "description": "path to JSON file to upload and assign to Collection",
                      "exclusive": [
                        "name",
                        "uri",
                        "wizard"
                      ],
                      "hidden": true,
                      "name": "json",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "wizard": {
                      "description": "Use interactive wizard to create collection",
                      "name": "wizard",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "name": {
                      "char": "n",
                      "description": "Collections name",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "name",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "uri": {
                      "char": "u",
                      "description": "URI of the Collection metadata",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "uri",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "files": {
                      "char": "f",
                      "description": "The --files -f flag allows the user to create a Core Digital Collection by providing both an image and metadata file.",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "files",
                      "summary": "Signify that the files are being uploaded -i/--image and -j/--json are required",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "image": {
                      "char": "i",
                      "dependsOn": [
                        "files"
                      ],
                      "description": "path to image file to upload and assign to Collection",
                      "exclusive": [
                        "--name",
                        "-n",
                        "--uri",
                        "-u",
                        "wizard"
                      ],
                      "hidden": true,
                      "name": "image",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "plugins": {
                      "name": "plugins",
                      "required": false,
                      "summary": "Use interactive plugin selection",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "pluginsFile": {
                      "exclusive": [
                        "plugins"
                      ],
                      "name": "pluginsFile",
                      "required": false,
                      "summary": "Path to a json file with plugin data",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:collection:create",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "core collection create [FLAGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "collection",
                    "create.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "collection": {
                      "description": "Collection pubkey (mint) to fetch",
                      "name": "collection",
                      "required": true
                    }
                  },
                  "description": "Fetch an Collection by pubkey",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> HaKyubAWuTS9AZkpUHtFkTKAHs1KKAJ3onZPmaP9zBpe"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "output": {
                      "char": "o",
                      "description": "output directory of the downloaded Collection. If not the current folder will be used.",
                      "name": "output",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:collection:fetch",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "collection",
                    "fetch.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "output": {
                      "description": "Destination for the template files",
                      "name": "output"
                    }
                  },
                  "description": "Generate a template folder for Collection metadata and image, and plugins",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> -n \"Cool Collection\" -u \"https://example.com/collection-metadata.json\""
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:collection:template",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "collection",
                    "template.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "MPL Core Plugins Module",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:plugins",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "plugins",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "id": {
                      "description": "asset or collection public key",
                      "name": "id",
                      "required": true
                    },
                    "json": {
                      "description": "path to a plugin data JSON file",
                      "name": "json",
                      "required": false
                    }
                  },
                  "description": "Add a plugin to an asset or collection",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> <asset or collection public key> --wizard",
                    "<%= config.bin %> <%= command.id %> <asset or collection public key> ./plugin.json"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "wizard": {
                      "description": "Wizard mode",
                      "name": "wizard",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "collection": {
                      "description": "Is this a collection's plugin",
                      "name": "collection",
                      "allowNo": false,
                      "type": "boolean"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:plugins:add",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "plugins",
                    "add.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Generate a plugin.json file with usable plugin data",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "asset": {
                      "description": "Generate Asset Plugin data",
                      "exclusive": [
                        "collection"
                      ],
                      "name": "asset",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "collection": {
                      "description": "Generate Collection Plugin data",
                      "exclusive": [
                        "asset"
                      ],
                      "name": "collection",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "output": {
                      "char": "o",
                      "description": "Output directory for the plugins.json file. If not present, the current folder will be used.",
                      "name": "output",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "core:plugins:generate",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "core",
                    "plugins",
                    "generate.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Various tools for the Solana ecosystem",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "bytes": {
                      "description": "Number of bytes",
                      "name": "bytes",
                      "required": true
                    }
                  },
                  "description": "Get rent cost for a given number of bytes",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> <bytes>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "noHeader": {
                      "description": "Ignore the 128 byte header for the rent cost",
                      "name": "noHeader",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "lamports": {
                      "description": "Display the rent cost in Lamports",
                      "name": "lamports",
                      "allowNo": false,
                      "type": "boolean"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:rent",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "rent.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "SOL related tools such as balance, airdrop, etc.",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:sol",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "sol",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "amount": {
                      "description": "Amount of SOL to airdrop",
                      "name": "amount",
                      "required": true
                    },
                    "address": {
                      "description": "Address to airdrop SOL to",
                      "name": "address",
                      "required": false
                    }
                  },
                  "description": "Airdrop SOL to an address",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> toolbox sol airdrop 1",
                    "<%= config.bin %> <%= command.id %> toolbox sol airdrop 1 <address>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:sol:airdrop",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "toolbox sol airdrop [ARGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "sol",
                    "airdrop.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "address": {
                      "description": "Optional Solana address to check balance for. If not provided, checks the current identity's balance.",
                      "name": "address",
                      "required": false
                    }
                  },
                  "description": "Check the SOL balance of a Solana address. If no address is provided, checks the balance of the current identity.",
                  "examples": [
                    "<%= config.bin %> <%= command.id %>",
                    "<%= config.bin %> <%= command.id %> <address>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:sol:balance",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "toolbox sol balance [ADDRESS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "sol",
                    "balance.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "amount": {
                      "description": "Amount of SOL to transfer",
                      "name": "amount",
                      "required": true
                    },
                    "address": {
                      "description": "Address to transfer SOL to",
                      "name": "address",
                      "required": true
                    }
                  },
                  "description": "Transfer SOL to an address",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> toolbox sol transfer 1 11111111111111111111111111111111"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:sol:transfer",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "toolbox sol transfer [FLAGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "sol",
                    "transfer.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Token related tools such as create, mint, etc.",
                  "flags": {},
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:token",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": false,
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "token",
                    "index.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {},
                  "description": "Create a fungible token using 2 different methods:\n\n  1. Simple Creation: Create a token by providing the name, symbol, and mint amount.\n     Example: mplx toolbox token create --name \"My Token\" --symbol \"TOKEN\" --mint-amount 1000000\n\n  2. Interactive Wizard: Create a token using the interactive wizard which guides you through the process.\n     Example: mplx toolbox token create --wizard\n\n  Additional Options:\n  - Use --decimals to specify the number of decimal places (0-9, default: 0)\n  - Use --description to add a description to your token\n  - Use --image to add an image to your token metadata\n  - Use --speed-run to measure execution time\n  ",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> --wizard",
                    "<%= config.bin %> <%= command.id %> --name \"My Token\" --symbol \"TOKEN\" --description \"My awesome token\" --image ./image.png --decimals 2 --mint-amount 1000000"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "wizard": {
                      "description": "Interactive mode that guides you through token creation step by step",
                      "name": "wizard",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "speed-run": {
                      "description": "Enable speed run mode to measure execution time",
                      "name": "speed-run",
                      "required": false,
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "name": {
                      "description": "Name of the token (e.g., \"My Awesome Token\")",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "name",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "symbol": {
                      "description": "Token symbol (2-6 characters, e.g., \"MAT\")",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "symbol",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "decimals": {
                      "description": "Number of decimal places (0-9, default: 0). Example: 2 decimals means 100 tokens = 100_00",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "decimals",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "description": {
                      "description": "Description of the token and its purpose",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "description",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "image": {
                      "description": "Path to the token image file (PNG, JPG, or GIF)",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "image",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "mint-amount": {
                      "description": "Initial amount of tokens to mint (must be greater than 0). Example: With 2 decimals, 1000 = 1000_00 tokens",
                      "exclusive": [
                        "wizard"
                      ],
                      "name": "mint-amount",
                      "required": false,
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:token:create",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "toolbox token create [FLAGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "token",
                    "create.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "mintAddress": {
                      "description": "Mint address of the token",
                      "name": "mintAddress",
                      "required": true
                    },
                    "amount": {
                      "description": "Amount to transfer in smallest unit (e.g., if decimals = 2, amount 100 represents 1 token)",
                      "name": "amount",
                      "required": true
                    },
                    "destination": {
                      "description": "Destination wallet address",
                      "name": "destination",
                      "required": true
                    }
                  },
                  "description": "Transfer tokens to a destination address",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> toolbox token transfer <mintAddress> <amount>"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:token:transfer",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "usage": "toolbox token transfer [ARGS]",
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "token",
                    "transfer.js"
                  ]
                },
                {
                  "aliases": [],
                  "args": {
                    "mint": {
                      "description": "Mint address of the token to be updated.",
                      "name": "mint",
                      "required": true
                    }
                  },
                  "description": "Update token metadata including name, description, symbol, and image",
                  "examples": [
                    "<%= config.bin %> <%= command.id %> toolbox token update <mintAddress> <flags>",
                    "<%= config.bin %> <%= command.id %> toolbox token update <mintAddress> --name \"New Name\" --description \"New Description\" --image ./image.png"
                  ],
                  "flags": {
                    "json": {
                      "description": "Format output as json.",
                      "helpGroup": "GLOBAL",
                      "name": "json",
                      "allowNo": false,
                      "type": "boolean"
                    },
                    "commitment": {
                      "helpGroup": "GLOBAL",
                      "name": "commitment",
                      "summary": "Commitment level",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "processed",
                        "confirmed",
                        "finalized"
                      ],
                      "type": "option"
                    },
                    "config": {
                      "char": "c",
                      "description": "Path to config file. Default is ~/.config/mplx/config.json",
                      "helpGroup": "GLOBAL",
                      "name": "config",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "keypair": {
                      "char": "k",
                      "helpGroup": "GLOBAL",
                      "name": "keypair",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "log-level": {
                      "helpGroup": "GLOBAL",
                      "name": "log-level",
                      "summary": "Specify level for logging.",
                      "default": "info",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "options": [
                        "debug",
                        "warn",
                        "error",
                        "info",
                        "trace"
                      ],
                      "type": "option"
                    },
                    "payer": {
                      "char": "p",
                      "helpGroup": "GLOBAL",
                      "name": "payer",
                      "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "rpc": {
                      "char": "r",
                      "helpGroup": "GLOBAL",
                      "name": "rpc",
                      "summary": "RPC URL for the cluster",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "image": {
                      "description": "Image path for new token image.",
                      "name": "image",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "name": {
                      "description": "New name of the token.",
                      "name": "name",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "description": {
                      "description": "New description of the token",
                      "name": "description",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    },
                    "symbol": {
                      "description": "New symbol of the token.",
                      "name": "symbol",
                      "hasDynamicHelp": false,
                      "multiple": false,
                      "type": "option"
                    }
                  },
                  "hasDynamicHelp": false,
                  "hiddenAliases": [],
                  "id": "toolbox:token:update",
                  "pluginAlias": "@metaplex-foundation/cli",
                  "pluginName": "@metaplex-foundation/cli",
                  "pluginType": "core",
                  "strict": true,
                  "enableJsonFlag": true,
                  "baseExamples": [
                    "<%= config.bin %> <%= command.id %> --json",
                    "<%= config.bin %> <%= command.id %> --log-level debug",
                    "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                    "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                    "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                    "<%= config.bin %> <%= command.id %> --commitment finalized"
                  ],
                  "isESM": true,
                  "relativePath": [
                    "dist",
                    "commands",
                    "toolbox",
                    "token",
                    "update.js"
                  ]
                }
              ],
              "commandsDir": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli/dist/commands",
              "hasManifest": true,
              "hooks": {},
              "isRoot": true,
              "manifest": {
                "commands": {
                  "config:get": {
                    "aliases": [],
                    "args": {
                      "key": {
                        "description": "The key to get",
                        "name": "key",
                        "options": [
                          "rpcUrl",
                          "commitment",
                          "payer",
                          "keypair"
                        ],
                        "required": true
                      }
                    },
                    "description": "Get a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> keypair",
                      "<%= config.bin %> <%= command.id %> payer",
                      "<%= config.bin %> <%= command.id %> rpcUrl",
                      "<%= config.bin %> <%= command.id %> commitment"
                    ],
                    "flags": {
                      "config": {
                        "char": "c",
                        "description": "path to config file. Default is ~/.config/mplx/config.json",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:get",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "get.js"
                    ]
                  },
                  "config": {
                    "aliases": [],
                    "args": {},
                    "description": "Show the current config",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {
                      "config": {
                        "char": "c",
                        "description": "path to config file. Default is ~/.config/mplx/config.json",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "index.js"
                    ]
                  },
                  "config:set": {
                    "aliases": [],
                    "args": {
                      "key": {
                        "description": "The key to set",
                        "name": "key",
                        "options": [
                          "rpcUrl",
                          "commitment",
                          "payer",
                          "keypair"
                        ],
                        "required": true
                      },
                      "value": {
                        "description": "The value to set",
                        "name": "value",
                        "required": true
                      }
                    },
                    "description": "Set a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> payer /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> rpcUrl http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> commitment confirmed"
                    ],
                    "flags": {
                      "config": {
                        "char": "c",
                        "description": "path to config file. Default is ~/.config/mplx/config.json",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:set",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "set.js"
                    ]
                  },
                  "core": {
                    "aliases": [],
                    "args": {},
                    "description": "MPL Core Program",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "index.js"
                    ]
                  },
                  "toolbox": {
                    "aliases": [],
                    "args": {},
                    "description": "Various tools for the Solana ecosystem",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "index.js"
                    ]
                  },
                  "toolbox:rent": {
                    "aliases": [],
                    "args": {
                      "bytes": {
                        "description": "Number of bytes",
                        "name": "bytes",
                        "required": true
                      }
                    },
                    "description": "Get rent cost for a given number of bytes",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> <bytes>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "noHeader": {
                        "description": "Ignore the 128 byte header for the rent cost",
                        "name": "noHeader",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "lamports": {
                        "description": "Display the rent cost in Lamports",
                        "name": "lamports",
                        "allowNo": false,
                        "type": "boolean"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:rent",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "rent.js"
                    ]
                  },
                  "config:explorer:set": {
                    "aliases": [],
                    "args": {},
                    "description": "Set the preferred blockchain explorer",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:explorer:set",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "explorer",
                      "set.js"
                    ]
                  },
                  "config:rpcs:add": {
                    "aliases": [],
                    "args": {
                      "name": {
                        "description": "Name of wallet (max 6 characters and no spaces)",
                        "name": "name",
                        "required": true
                      },
                      "endpoint": {
                        "description": "Path to keypair json file",
                        "name": "endpoint",
                        "required": true
                      }
                    },
                    "description": "Set a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> add dev1 /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> set dev1",
                      "<%= config.bin %> <%= command.id %> remove dev1"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:rpcs:add",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "rpcs",
                      "add.js"
                    ]
                  },
                  "config:rpcs:list": {
                    "aliases": [],
                    "args": {},
                    "description": "Set a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> list"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:rpcs:list",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "rpcs",
                      "list.js"
                    ]
                  },
                  "config:rpcs:remove": {
                    "aliases": [],
                    "args": {
                      "name": {
                        "description": "Name of RPC to remove from config",
                        "name": "name",
                        "required": true
                      }
                    },
                    "description": "Set a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> remove dev1"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:rpcs:remove",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "rpcs",
                      "remove.js"
                    ]
                  },
                  "config:rpcs:set": {
                    "aliases": [],
                    "args": {},
                    "description": "Set a new active wallet from a list of wallets",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:rpcs:set",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "rpcs",
                      "set.js"
                    ]
                  },
                  "config:wallets:add": {
                    "aliases": [],
                    "args": {
                      "name": {
                        "description": "Name of wallet (max 6 characters, alphanumeric, hyphens and underscores only)",
                        "name": "name",
                        "required": true
                      },
                      "path": {
                        "description": "Path to keypair json file",
                        "name": "path",
                        "required": true
                      }
                    },
                    "description": "Set a config value from a key",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> add dev1 /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> set dev1",
                      "<%= config.bin %> <%= command.id %> remove dev1"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:wallets:add",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "wallets",
                      "add.js"
                    ]
                  },
                  "config:wallets:list": {
                    "aliases": [],
                    "args": {},
                    "description": "List all wallets",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> list"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:wallets:list",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "wallets",
                      "list.js"
                    ]
                  },
                  "config:wallets:new": {
                    "aliases": [],
                    "args": {},
                    "description": "Create a new wallet and optionally add it to the config file",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>",
                      "<%= config.bin %> <%= command.id %> --name my-wallet",
                      "<%= config.bin %> <%= command.id %> --name my-wallet --output ./wallets",
                      "<%= config.bin %> <%= command.id %> --name my-wallet --hidden"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "output": {
                        "description": "Directory path where to save the wallet file",
                        "name": "output",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "hidden": {
                        "description": "Save wallet in the hidden `mplx config` folder",
                        "name": "hidden",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name for wallet (max 6 characters, alphanumeric, hyphens and underscores only). If provided, the wallet will be added to the config file",
                        "name": "name",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:wallets:new",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "wallets",
                      "new.js"
                    ]
                  },
                  "config:wallets:remove": {
                    "aliases": [],
                    "args": {
                      "name": {
                        "description": "Name of wallet to remove from config",
                        "name": "name",
                        "required": true
                      }
                    },
                    "description": "Remove a wallet from the config",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> remove dev1"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:wallets:remove",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "wallets",
                      "remove.js"
                    ]
                  },
                  "config:wallets:set": {
                    "aliases": [],
                    "args": {},
                    "description": "Set a new active wallet from a list of wallets",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "config:wallets:set",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "config",
                      "wallets",
                      "set.js"
                    ]
                  },
                  "core:asset:burn": {
                    "aliases": [],
                    "args": {
                      "asset": {
                        "description": "Burn at single asset by mint",
                        "name": "asset"
                      }
                    },
                    "description": "Burn a single Asset or a list of Assets",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> assetId",
                      "<%= config.bin %> <%= command.id %> --list ./assetsToBurn.json"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "list": {
                        "description": "File path to a .json list of Assets to burn in JSON array format (e.g. [asset1, asset2])",
                        "name": "list",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "collection": {
                        "description": "Collection ID to burn Asset from",
                        "name": "collection",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset:burn",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "burn.js"
                    ]
                  },
                  "core:asset:create": {
                    "aliases": [],
                    "args": {},
                    "description": "Create an MPL Core Asset using 3 different methods:\n\n  1. Simple Creation: Create a single Asset by providing the name and URI of the metadata.\n     Example: mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\"\n\n  2. File-based Creation: Create a single Asset by providing an image file and a JSON metadata file.\n     Example: mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\"\n\n  3. Interactive Wizard: Create an Asset using the interactive wizard which guides you through the process.\n     Example: mplx core asset create --wizard\n\n  Additional Options:\n  - Use --collection to specify a collection ID for the asset\n  - Use --plugins to interactively select and configure plugins\n  - Use --pluginsFile to provide plugin configuration from a JSON file\n  ",
                    "examples": [
                      "$ mplx core asset create --wizard",
                      "$ mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\"",
                      "$ mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\"",
                      "$ mplx core asset create --name \"My NFT\" --uri \"https://example.com/metadata.json\" --collection \"collection_id_here\"",
                      "$ mplx core asset create --files --image \"./my-nft.png\" --json \"./metadata.json\" --collection \"collection_id_here\""
                    ],
                    "flags": {
                      "json": {
                        "dependsOn": [
                          "files"
                        ],
                        "exclusive": [
                          "name",
                          "uri",
                          "wizard"
                        ],
                        "hidden": true,
                        "name": "json",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "wizard": {
                        "description": "Use interactive wizard to create asset",
                        "name": "wizard",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Asset name",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "name",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "uri": {
                        "description": "URI of the Asset metadata",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "uri",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "collection": {
                        "description": "Collection ID",
                        "name": "collection",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "files": {
                        "dependsOn": [
                          "image",
                          "json"
                        ],
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "files",
                        "summary": "Signify that the files are being uploaded -i/--image and -j/--json are required",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "image": {
                        "dependsOn": [
                          "files"
                        ],
                        "description": "path to image file to upload and assign to Asset",
                        "exclusive": [
                          "--name",
                          "--uri",
                          "wizard"
                        ],
                        "hidden": true,
                        "name": "image",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "plugins": {
                        "name": "plugins",
                        "required": false,
                        "summary": "Use interactive plugin selection",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "pluginsFile": {
                        "exclusive": [
                          "plugins"
                        ],
                        "name": "pluginsFile",
                        "required": false,
                        "summary": "Path to a json file with plugin data",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset:create",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "core asset create [FLAGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "create.js"
                    ]
                  },
                  "core:asset:fetch": {
                    "aliases": [],
                    "args": {
                      "asset": {
                        "description": "The asset ID to fetch",
                        "name": "asset"
                      }
                    },
                    "description": "Fetch an asset by mint address. Use --download to save files to disk. Without specific flags, downloads all files (asset data, metadata, and image).",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> <assetId>",
                      "<%= config.bin %> <%= command.id %> <assetId> --download",
                      "<%= config.bin %> <%= command.id %> <assetId> --download --output ./assets",
                      "<%= config.bin %> <%= command.id %> <assetId> --download --image",
                      "<%= config.bin %> <%= command.id %> <assetId> --download --metadata",
                      "<%= config.bin %> <%= command.id %> <assetId> --download --asset",
                      "<%= config.bin %> <%= command.id %> <assetId> --download --image --metadata"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "download": {
                        "description": "Download asset files to disk. Without specific flags, downloads all files.",
                        "name": "download",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "output": {
                        "dependsOn": [
                          "download"
                        ],
                        "description": "Directory path where to save the downloaded assets",
                        "name": "output",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "image": {
                        "dependsOn": [
                          "download"
                        ],
                        "description": "Download the image file (requires --download)",
                        "name": "image",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "metadata": {
                        "dependsOn": [
                          "download"
                        ],
                        "description": "Download the metadata file (requires --download)",
                        "name": "metadata",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "asset": {
                        "dependsOn": [
                          "download"
                        ],
                        "description": "Download the asset data file (requires --download)",
                        "name": "asset",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset:fetch",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "fetch.js"
                    ]
                  },
                  "core:asset": {
                    "aliases": [],
                    "args": {},
                    "description": "MPL Core Asset Module",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "index.js"
                    ]
                  },
                  "core:asset:template": {
                    "aliases": [],
                    "args": {
                      "output": {
                        "description": "Output directory, if not provided, the current working directory will be used",
                        "name": "output"
                      }
                    },
                    "description": "Generate a template folder for Asset metadata and image",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>",
                      "<%= config.bin %> <%= command.id %> -o",
                      "<%= config.bin %> <%= command.id %> -o /path/to/directory"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset:template",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "template.js"
                    ]
                  },
                  "core:asset:update": {
                    "aliases": [],
                    "args": {
                      "assetId": {
                        "description": "Asset to update",
                        "name": "assetId",
                        "required": true
                      }
                    },
                    "description": "Update an MPL Core Asset",
                    "examples": [
                      "Single Asset Update:",
                      "<%= config.bin %> <%= command.id %> <assetId> --name \"Updated Asset\" --uri \"https://example.com/metadata.json\"",
                      "<%= config.bin %> <%= command.id %> <assetId> --json ./asset/metadata.json --image ./asset/image.jpg --sync",
                      "<%= config.bin %> <%= command.id %> <assetId> --name \"Updated Asset\"",
                      "<%= config.bin %> <%= command.id %> <assetId> --image ./asset/image.jpg",
                      "<%= config.bin %> <%= command.id %> <assetId> --json ./asset/metadata.json"
                    ],
                    "flags": {
                      "json": {
                        "description": "Path to JSON file",
                        "exclusive": [
                          "name",
                          "uri"
                        ],
                        "name": "json",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "name": {
                        "description": "Asset name",
                        "exclusive": [
                          "json"
                        ],
                        "name": "name",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "uri": {
                        "description": "URI of the Asset metadata",
                        "exclusive": [
                          "json"
                        ],
                        "name": "uri",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "image": {
                        "description": "Path to image file",
                        "name": "image",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "collectionId": {
                        "description": "Collection ID",
                        "name": "collectionId",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:asset:update",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "asset",
                      "update.js"
                    ]
                  },
                  "core:collection:create": {
                    "aliases": [],
                    "args": {},
                    "description": "Create an MPL Core Collection using 3 different methods:\n\n  1. Simple Creation: Create a single Collection by providing the name and URI of the metadata.\n     Example: mplx core collection create --name \"My Collection\" --uri \"https://example.com/metadata.json\"\n\n  2. File-based Creation: Create a single Collection by providing an image file and a JSON metadata file.\n     Example: mplx core collection create --files --image \"./my-collection.png\" --json \"./metadata.json\"\n\n  3. Interactive Wizard: Create a Collection using the interactive wizard which guides you through the process.\n     Example: mplx core collection create --wizard\n\n  Additional Options:\n  - Use --plugins to interactively select and configure plugins\n  - Use --pluginsFile to provide plugin configuration from a JSON file\n  ",
                    "examples": [
                      "$ mplx core collection create --wizard",
                      "$ mplx core collection create --name \"My Collection\" --uri \"https://example.com/metadata.json\"",
                      "$ mplx core collection create --files --image \"./my-collection.png\" --json \"./metadata.json\""
                    ],
                    "flags": {
                      "json": {
                        "char": "j",
                        "dependsOn": [
                          "files"
                        ],
                        "description": "path to JSON file to upload and assign to Collection",
                        "exclusive": [
                          "name",
                          "uri",
                          "wizard"
                        ],
                        "hidden": true,
                        "name": "json",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "wizard": {
                        "description": "Use interactive wizard to create collection",
                        "name": "wizard",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "name": {
                        "char": "n",
                        "description": "Collections name",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "name",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "uri": {
                        "char": "u",
                        "description": "URI of the Collection metadata",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "uri",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "files": {
                        "char": "f",
                        "description": "The --files -f flag allows the user to create a Core Digital Collection by providing both an image and metadata file.",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "files",
                        "summary": "Signify that the files are being uploaded -i/--image and -j/--json are required",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "image": {
                        "char": "i",
                        "dependsOn": [
                          "files"
                        ],
                        "description": "path to image file to upload and assign to Collection",
                        "exclusive": [
                          "--name",
                          "-n",
                          "--uri",
                          "-u",
                          "wizard"
                        ],
                        "hidden": true,
                        "name": "image",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "plugins": {
                        "name": "plugins",
                        "required": false,
                        "summary": "Use interactive plugin selection",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "pluginsFile": {
                        "exclusive": [
                          "plugins"
                        ],
                        "name": "pluginsFile",
                        "required": false,
                        "summary": "Path to a json file with plugin data",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:collection:create",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "core collection create [FLAGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "collection",
                      "create.js"
                    ]
                  },
                  "core:collection:fetch": {
                    "aliases": [],
                    "args": {
                      "collection": {
                        "description": "Collection pubkey (mint) to fetch",
                        "name": "collection",
                        "required": true
                      }
                    },
                    "description": "Fetch an Collection by pubkey",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> HaKyubAWuTS9AZkpUHtFkTKAHs1KKAJ3onZPmaP9zBpe"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "output": {
                        "char": "o",
                        "description": "output directory of the downloaded Collection. If not the current folder will be used.",
                        "name": "output",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:collection:fetch",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "collection",
                      "fetch.js"
                    ]
                  },
                  "core:collection": {
                    "aliases": [],
                    "args": {},
                    "description": "MPL Core Collection Module",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:collection",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "collection",
                      "index.js"
                    ]
                  },
                  "core:collection:template": {
                    "aliases": [],
                    "args": {
                      "output": {
                        "description": "Destination for the template files",
                        "name": "output"
                      }
                    },
                    "description": "Generate a template folder for Collection metadata and image, and plugins",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> -n \"Cool Collection\" -u \"https://example.com/collection-metadata.json\""
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:collection:template",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "collection",
                      "template.js"
                    ]
                  },
                  "core:plugins:add": {
                    "aliases": [],
                    "args": {
                      "id": {
                        "description": "asset or collection public key",
                        "name": "id",
                        "required": true
                      },
                      "json": {
                        "description": "path to a plugin data JSON file",
                        "name": "json",
                        "required": false
                      }
                    },
                    "description": "Add a plugin to an asset or collection",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> <asset or collection public key> --wizard",
                      "<%= config.bin %> <%= command.id %> <asset or collection public key> ./plugin.json"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "wizard": {
                        "description": "Wizard mode",
                        "name": "wizard",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "collection": {
                        "description": "Is this a collection's plugin",
                        "name": "collection",
                        "allowNo": false,
                        "type": "boolean"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:plugins:add",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "plugins",
                      "add.js"
                    ]
                  },
                  "core:plugins:generate": {
                    "aliases": [],
                    "args": {},
                    "description": "Generate a plugin.json file with usable plugin data",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "asset": {
                        "description": "Generate Asset Plugin data",
                        "exclusive": [
                          "collection"
                        ],
                        "name": "asset",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "collection": {
                        "description": "Generate Collection Plugin data",
                        "exclusive": [
                          "asset"
                        ],
                        "name": "collection",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "output": {
                        "char": "o",
                        "description": "Output directory for the plugins.json file. If not present, the current folder will be used.",
                        "name": "output",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:plugins:generate",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "plugins",
                      "generate.js"
                    ]
                  },
                  "core:plugins": {
                    "aliases": [],
                    "args": {},
                    "description": "MPL Core Plugins Module",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "core:plugins",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "core",
                      "plugins",
                      "index.js"
                    ]
                  },
                  "toolbox:sol:airdrop": {
                    "aliases": [],
                    "args": {
                      "amount": {
                        "description": "Amount of SOL to airdrop",
                        "name": "amount",
                        "required": true
                      },
                      "address": {
                        "description": "Address to airdrop SOL to",
                        "name": "address",
                        "required": false
                      }
                    },
                    "description": "Airdrop SOL to an address",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> toolbox sol airdrop 1",
                      "<%= config.bin %> <%= command.id %> toolbox sol airdrop 1 <address>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:sol:airdrop",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "toolbox sol airdrop [ARGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "sol",
                      "airdrop.js"
                    ]
                  },
                  "toolbox:sol:balance": {
                    "aliases": [],
                    "args": {
                      "address": {
                        "description": "Optional Solana address to check balance for. If not provided, checks the current identity's balance.",
                        "name": "address",
                        "required": false
                      }
                    },
                    "description": "Check the SOL balance of a Solana address. If no address is provided, checks the balance of the current identity.",
                    "examples": [
                      "<%= config.bin %> <%= command.id %>",
                      "<%= config.bin %> <%= command.id %> <address>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:sol:balance",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "toolbox sol balance [ADDRESS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "sol",
                      "balance.js"
                    ]
                  },
                  "toolbox:sol": {
                    "aliases": [],
                    "args": {},
                    "description": "SOL related tools such as balance, airdrop, etc.",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:sol",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "sol",
                      "index.js"
                    ]
                  },
                  "toolbox:sol:transfer": {
                    "aliases": [],
                    "args": {
                      "amount": {
                        "description": "Amount of SOL to transfer",
                        "name": "amount",
                        "required": true
                      },
                      "address": {
                        "description": "Address to transfer SOL to",
                        "name": "address",
                        "required": true
                      }
                    },
                    "description": "Transfer SOL to an address",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> toolbox sol transfer 1 11111111111111111111111111111111"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:sol:transfer",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "toolbox sol transfer [FLAGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "sol",
                      "transfer.js"
                    ]
                  },
                  "toolbox:token:create": {
                    "aliases": [],
                    "args": {},
                    "description": "Create a fungible token using 2 different methods:\n\n  1. Simple Creation: Create a token by providing the name, symbol, and mint amount.\n     Example: mplx toolbox token create --name \"My Token\" --symbol \"TOKEN\" --mint-amount 1000000\n\n  2. Interactive Wizard: Create a token using the interactive wizard which guides you through the process.\n     Example: mplx toolbox token create --wizard\n\n  Additional Options:\n  - Use --decimals to specify the number of decimal places (0-9, default: 0)\n  - Use --description to add a description to your token\n  - Use --image to add an image to your token metadata\n  - Use --speed-run to measure execution time\n  ",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> --wizard",
                      "<%= config.bin %> <%= command.id %> --name \"My Token\" --symbol \"TOKEN\" --description \"My awesome token\" --image ./image.png --decimals 2 --mint-amount 1000000"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "wizard": {
                        "description": "Interactive mode that guides you through token creation step by step",
                        "name": "wizard",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "speed-run": {
                        "description": "Enable speed run mode to measure execution time",
                        "name": "speed-run",
                        "required": false,
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "name": {
                        "description": "Name of the token (e.g., \"My Awesome Token\")",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "name",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "symbol": {
                        "description": "Token symbol (2-6 characters, e.g., \"MAT\")",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "symbol",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "decimals": {
                        "description": "Number of decimal places (0-9, default: 0). Example: 2 decimals means 100 tokens = 100_00",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "decimals",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "description": {
                        "description": "Description of the token and its purpose",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "description",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "image": {
                        "description": "Path to the token image file (PNG, JPG, or GIF)",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "image",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "mint-amount": {
                        "description": "Initial amount of tokens to mint (must be greater than 0). Example: With 2 decimals, 1000 = 1000_00 tokens",
                        "exclusive": [
                          "wizard"
                        ],
                        "name": "mint-amount",
                        "required": false,
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:token:create",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "toolbox token create [FLAGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "token",
                      "create.js"
                    ]
                  },
                  "toolbox:token": {
                    "aliases": [],
                    "args": {},
                    "description": "Token related tools such as create, mint, etc.",
                    "flags": {},
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:token",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": false,
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "token",
                      "index.js"
                    ]
                  },
                  "toolbox:token:transfer": {
                    "aliases": [],
                    "args": {
                      "mintAddress": {
                        "description": "Mint address of the token",
                        "name": "mintAddress",
                        "required": true
                      },
                      "amount": {
                        "description": "Amount to transfer in smallest unit (e.g., if decimals = 2, amount 100 represents 1 token)",
                        "name": "amount",
                        "required": true
                      },
                      "destination": {
                        "description": "Destination wallet address",
                        "name": "destination",
                        "required": true
                      }
                    },
                    "description": "Transfer tokens to a destination address",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> toolbox token transfer <mintAddress> <amount>"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:token:transfer",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "usage": "toolbox token transfer [ARGS]",
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "token",
                      "transfer.js"
                    ]
                  },
                  "toolbox:token:update": {
                    "aliases": [],
                    "args": {
                      "mint": {
                        "description": "Mint address of the token to be updated.",
                        "name": "mint",
                        "required": true
                      }
                    },
                    "description": "Update token metadata including name, description, symbol, and image",
                    "examples": [
                      "<%= config.bin %> <%= command.id %> toolbox token update <mintAddress> <flags>",
                      "<%= config.bin %> <%= command.id %> toolbox token update <mintAddress> --name \"New Name\" --description \"New Description\" --image ./image.png"
                    ],
                    "flags": {
                      "json": {
                        "description": "Format output as json.",
                        "helpGroup": "GLOBAL",
                        "name": "json",
                        "allowNo": false,
                        "type": "boolean"
                      },
                      "commitment": {
                        "helpGroup": "GLOBAL",
                        "name": "commitment",
                        "summary": "Commitment level",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "processed",
                          "confirmed",
                          "finalized"
                        ],
                        "type": "option"
                      },
                      "config": {
                        "char": "c",
                        "description": "Path to config file. Default is ~/.config/mplx/config.json",
                        "helpGroup": "GLOBAL",
                        "name": "config",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "keypair": {
                        "char": "k",
                        "helpGroup": "GLOBAL",
                        "name": "keypair",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "log-level": {
                        "helpGroup": "GLOBAL",
                        "name": "log-level",
                        "summary": "Specify level for logging.",
                        "default": "info",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "options": [
                          "debug",
                          "warn",
                          "error",
                          "info",
                          "trace"
                        ],
                        "type": "option"
                      },
                      "payer": {
                        "char": "p",
                        "helpGroup": "GLOBAL",
                        "name": "payer",
                        "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "rpc": {
                        "char": "r",
                        "helpGroup": "GLOBAL",
                        "name": "rpc",
                        "summary": "RPC URL for the cluster",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "image": {
                        "description": "Image path for new token image.",
                        "name": "image",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "name": {
                        "description": "New name of the token.",
                        "name": "name",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "description": {
                        "description": "New description of the token",
                        "name": "description",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      },
                      "symbol": {
                        "description": "New symbol of the token.",
                        "name": "symbol",
                        "hasDynamicHelp": false,
                        "multiple": false,
                        "type": "option"
                      }
                    },
                    "hasDynamicHelp": false,
                    "hiddenAliases": [],
                    "id": "toolbox:token:update",
                    "pluginAlias": "@metaplex-foundation/cli",
                    "pluginName": "@metaplex-foundation/cli",
                    "pluginType": "core",
                    "strict": true,
                    "enableJsonFlag": true,
                    "baseExamples": [
                      "<%= config.bin %> <%= command.id %> --json",
                      "<%= config.bin %> <%= command.id %> --log-level debug",
                      "<%= config.bin %> <%= command.id %> --keypair /path/to/keypair.json",
                      "<%= config.bin %> <%= command.id %> --keypair usb://ledger?key=0",
                      "<%= config.bin %> <%= command.id %> --rpc http://localhost:8899",
                      "<%= config.bin %> <%= command.id %> --commitment finalized"
                    ],
                    "isESM": true,
                    "relativePath": [
                      "dist",
                      "commands",
                      "toolbox",
                      "token",
                      "update.js"
                    ]
                  }
                },
                "version": "0.0.6"
              },
              "moduleType": "module",
              "name": "@metaplex-foundation/cli",
              "pjson": {
                "name": "@metaplex-foundation/cli",
                "description": "Metaplex CLI",
                "version": "0.0.6",
                "author": "Metaplex <contact@metaplex.com>",
                "bin": {
                  "mplx": "./bin/run.js"
                },
                "oclif": {
                  "commands": "./dist/commands",
                  "bin": "mplx",
                  "plugins": [
                    "@oclif/plugin-help",
                    "@oclif/plugin-version",
                    "@oclif/plugin-not-found",
                    "@oclif/plugin-autocomplete",
                    "@oclif/plugin-commands",
                    "@oclif/plugin-plugins"
                  ],
                  "topicSeparator": " ",
                  "dirname": "mplx"
                },
                "bugs": "https://github.com/metaplex-foundation/cli/issues",
                "dependencies": {
                  "@ardrive/turbo-sdk": "^1.25.0",
                  "@inquirer/prompts": "^7.5.3",
                  "@inquirer/testing": "^2.1.47",
                  "@ledgerhq/hw-app-solana": "^7.2.4",
                  "@ledgerhq/hw-transport": "^6.31.4",
                  "@ledgerhq/hw-transport-node-hid-singleton": "^6.31.5",
                  "@metaplex-foundation/mpl-core": "^1.4.0",
                  "@metaplex-foundation/mpl-core-candy-machine": "^0.3.0",
                  "@metaplex-foundation/mpl-token-metadata": "^3.4.0",
                  "@metaplex-foundation/mpl-toolbox": "0.10.0",
                  "@metaplex-foundation/umi": "1.0.0",
                  "@metaplex-foundation/umi-bundle-defaults": "1.0.0",
                  "@metaplex-foundation/umi-signer-wallet-adapters": "1.0.0",
                  "@metaplex-foundation/umi-uploader-irys": "1.0.1",
                  "@metaplex-foundation/umi-web3js-adapters": "1.0.0",
                  "@oclif/plugin-autocomplete": "^3.2.29",
                  "@oclif/plugin-commands": "^4.1.25",
                  "@oclif/plugin-help": "^6.2.28",
                  "@oclif/plugin-not-found": "^3.2.54",
                  "@oclif/plugin-plugins": "^5.4.38",
                  "@oclif/plugin-version": "^2.2.28",
                  "@solana/web3.js": "^1.98.2",
                  "ansis": "^3.17.0",
                  "chalk": "^5.4.1",
                  "cli-progress": "^3.12.0",
                  "file-type": "^21.0.0",
                  "mime": "^4.0.7",
                  "mime-types": "^2.1.35",
                  "node-fetch": "^3.3.2",
                  "ora": "8.1.1",
                  "p-map": "^7.0.3"
                },
                "devDependencies": {
                  "@metaplex-foundation/amman": "^0.12.1",
                  "@metaplex-foundation/amman-client": "^0.2.4",
                  "@oclif/core": "^4.3.0",
                  "@oclif/prettier-config": "^0.2.1",
                  "@oclif/test": "^4.1.13",
                  "@types/async-retry": "^1.4.9",
                  "@types/bn.js": "^5.1.6",
                  "@types/chai": "^4.3.20",
                  "@types/chalk": "^2.2.4",
                  "@types/cli-progress": "^3.11.6",
                  "@types/mime-types": "^2.1.4",
                  "@types/mocha": "^10.0.10",
                  "@types/node": "^18.19.108",
                  "@types/node-hid": "^1.3.4",
                  "chai": "^4.5.0",
                  "eslint": "^8.57.1",
                  "eslint-config-oclif": "^5.2.2",
                  "eslint-config-oclif-typescript": "^3.1.14",
                  "eslint-config-prettier": "^9.1.0",
                  "install": "^0.13.0",
                  "mocha": "^10.8.2",
                  "mock-stdin": "^1.0.0",
                  "oclif": "^4.17.46",
                  "shx": "^0.3.4",
                  "ts-node": "^10.9.2",
                  "typescript": "^5.8.3"
                },
                "engines": {
                  "node": ">=20.0.0"
                },
                "files": [
                  "bin",
                  "dist",
                  "oclif.manifest.json",
                  "oclif.json",
                  "oclif.manifest.json.js"
                ],
                "homepage": "https://github.com/metaplex-foundation/cli",
                "keywords": [
                  "oclif"
                ],
                "license": "Metaplex License",
                "main": "dist/index.js",
                "type": "module",
                "repository": "metaplex-foundation/cli",
                "scripts": {
                  "clean": "shx rm -rf dist tsconfig.build.tsbuildinfo",
                  "prebuild": "pnpm run clean",
                  "build": "tsc -b tsconfig.build.json --verbose",
                  "build:clean": "pnpm run clean && pnpm run build",
                  "dev": "./bin/dev.js",
                  "mplx": "./bin/run.js",
                  "lint": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts",
                  "lint:fix": "ESLINT_USE_FLAT_CONFIG=false eslint . --ext .ts --fix",
                  "postpack": "shx rm -f oclif.manifest.json",
                  "prepack": "oclif manifest && oclif readme",
                  "test": "mocha --forbid-only \"test/**/*.test.ts\"",
                  "version": "oclif readme && git add README.md",
                  "validator": "CI=1 amman start --config ./.validator.cjs",
                  "validator:stop": "amman stop",
                  "verify": "tsc --noEmit && pnpm run build:clean"
                },
                "types": "dist/index.d.ts",
                "packageManager": "pnpm@9.12.3+sha512.cce0f9de9c5a7c95bef944169cc5dfe8741abfb145078c0d508b868056848a87c81e626246cb60967cbd7fd29a6c062ef73ff840d96b3c86c40ac92cf4a813ee"
              },
              "root": "/home/bappi/.nvm/versions/node/v24.2.0/lib/node_modules/@metaplex-foundation/cli",
              "type": "core",
              "valid": true,
              "version": "0.0.6",
              "commandDiscoveryOpts": {
                "globPatterns": [
                  "**/*.+(js|cjs|mjs|ts|tsx|mts|cts)",
                  "!**/*.+(d.ts|test.ts|test.js|spec.ts|spec.js|d.mts|d.cts)?(x)"
                ],
                "strategy": "pattern",
                "target": "./dist/commands"
              },
              "flexibleTaxonomy": false
            },
            "topicPermutations": {
              "validPermutations": {}
            }
          },
          "id": "core:asset:update",
          "token": {
            "arg": "assetId",
            "input": "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg",
            "type": "arg"
          }
        },
        "flags": {
          "json": {
            "name": "json",
            "description": "Path to JSON file",
            "exclusive": [
              "name",
              "uri"
            ],
            "input": [],
            "multiple": false,
            "type": "option"
          },
          "commitment": {
            "options": [
              "processed",
              "confirmed",
              "finalized"
            ],
            "summary": "Commitment level",
            "helpGroup": "GLOBAL",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "commitment"
          },
          "config": {
            "char": "c",
            "description": "Path to config file. Default is ~/.config/mplx/config.json",
            "helpGroup": "GLOBAL",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "config"
          },
          "keypair": {
            "char": "k",
            "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
            "helpGroup": "GLOBAL",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "keypair"
          },
          "log-level": {
            "default": "info",
            "helpGroup": "GLOBAL",
            "options": [
              "debug",
              "warn",
              "error",
              "info",
              "trace"
            ],
            "summary": "Specify level for logging.",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "log-level"
          },
          "payer": {
            "char": "p",
            "summary": "Path to keypair file (/path/keypair.json) or ledger (e.g. usb://ledger?key=0)",
            "helpGroup": "GLOBAL",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "payer"
          },
          "rpc": {
            "char": "r",
            "name": "rpc",
            "summary": "RPC URL for the cluster",
            "helpGroup": "GLOBAL",
            "input": [],
            "multiple": false,
            "type": "option"
          },
          "name": {
            "name": "name",
            "description": "Asset name",
            "exclusive": [
              "json"
            ],
            "input": [],
            "multiple": false,
            "type": "option"
          },
          "uri": {
            "name": "uri",
            "description": "URI of the Asset metadata",
            "exclusive": [
              "json"
            ],
            "input": [],
            "multiple": false,
            "type": "option"
          },
          "image": {
            "name": "image",
            "description": "Path to image file",
            "input": [],
            "multiple": false,
            "type": "option"
          },
          "collectionId": {
            "description": "Collection ID",
            "input": [],
            "multiple": false,
            "type": "option",
            "name": "collectionId"
          }
        },
        "strict": true
      },
      "output": {
        "args": {
          "assetId": "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg"
        },
        "argv": [
          "--mint",
          "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg",
          "{\"uri\":\"https://raw.githubusercontent.com/jubaerbappi/mytoken/main/metadata.json\"}",
          "--env",
          "mainnet-beta"
        ],
        "flags": {
          "json": "--data",
          "keypair": "/home/bappi/my-key.json",
          "log-level": "info"
        },
        "metadata": {
          "flags": {
            "log-level": {
              "setFromDefault": true
            }
          }
        },
        "nonExistentFlags": [
          "--mint",
          "--env"
        ],
        "raw": [
          {
            "arg": "assetId",
            "input": "4DsAizuNBD1nVP8Z9gA1Y95NPH4wijuRMciPcvSwfbJg",
            "type": "arg"
          },
          {
            "flag": "json",
            "input": "--data",
            "type": "flag"
          },
          {
            "input": "{\"uri\":\"https://raw.githubusercontent.com/jubaerbappi/mytoken/main/metadata.json\"}",
            "type": "arg"
          },
          {
            "flag": "keypair",
            "input": "/home/bappi/my-key.json",
            "type": "flag"
          },
          {
            "input": "mainnet-beta",
            "type": "arg"
          }
        ]
      }
    },
    "showHelp": true,
    "flags": [
      "--mint",
      "--env"
    ]
  }
}
bappi@DESKTOP-DKL26KA:~$
